name: Runtime Compatibility Test
on:
  workflow_run:
    workflows: ["Release Runtime Build"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Workflow run ID to download artifacts from'
        required: true
        type: string

jobs:
  fetch-client-info:
    # Only run if workflow_run was successful OR if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      client_versions: ${{ steps.parse-releases.outputs.client_versions }}
    steps:
      - name: Fetch and parse client releases
        id: parse-releases
        run: |
          RELEASES=$(curl -s https://api.github.com/repos/AstarNetwork/Astar/releases)
          
          # Get latest 2 client tags (v*.*.* format) and their asset URLs
          CLIENT_DATA=$(echo "$RELEASES" | jq -r '
            [.[] | select(.tag_name | test("^v\\d+\\.\\d+\\.\\d+$"))] |
            sort_by(.published_at) | reverse |
            .[0:2] |
            map({
              tag: .tag_name,
              asset_url: (.assets[] | select(.name | contains("astar-collator") and contains("ubuntu-x86_64.tar.gz")) | .browser_download_url)
            })'
          )
          
          echo "client_versions=${CLIENT_DATA}" >> $GITHUB_OUTPUT
          
          echo "Latest 2 Client Versions:"
          echo "$CLIENT_DATA" | jq -r '.[] | "- \(.tag) -> \(.asset_url)"'

  runtime-compatibility-test:
    needs: fetch-client-info
    # Only run if workflow_run was successful OR if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chain: [ "astar", "shiden", "shibuya" ]
        client_version: ${{ fromJson(needs.fetch-client-info.outputs.client_versions) }}
    env:
      ZOMBIENET_DIR: third-party/zombienet
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Determine workflow run ID
        id: determine-run-id
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RUN_ID="${{ github.event.inputs.run_id }}"
            echo "Provided run ID: ${RUN_ID}"
          else
            RUN_ID="${{ github.event.workflow_run.id }}"
            echo "Using workflow_run event run ID: ${RUN_ID}"
          fi
          echo "run_id=${RUN_ID}" >> $GITHUB_OUTPUT

      - name: Download runtime artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.chain }}-runtime
          path: ${{ env.ZOMBIENET_DIR }}
          run-id: ${{ steps.determine-run-id.outputs.run_id }}
          repository: AstarNetwork/Astar
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download and setup client
        run: |
          echo "Setting up client version: ${{ matrix.client_version.tag }}"
          curl -L -o astar-collator.tar.gz "${{ matrix.client_version.asset_url }}"
          tar -xzf astar-collator.tar.gz
          mv astar-collator ${{ env.ZOMBIENET_DIR }}/astar-collator
          chmod +x ${{ env.ZOMBIENET_DIR }}/astar-collator
          rm astar-collator.tar.gz
          
          # Verify client version
          ${{ env.ZOMBIENET_DIR }}/astar-collator --version || echo "Version check failed"

      - name: Prepare runtime for upgrade test
        working-directory: ${{ env.ZOMBIENET_DIR }}
        run: |
          RUNTIME_FILE=$(find . -maxdepth 1 -name "${{ matrix.chain }}_runtime.compact.compressed.wasm" -print -quit)
          if [ -n "$RUNTIME_FILE" ]; then
            mv "$RUNTIME_FILE" runtime.compact.compressed.wasm
            echo "✅ Renamed runtime: $(basename "$RUNTIME_FILE") → runtime.compact.compressed.wasm"
          else
            echo "❌ No runtime file found matching pattern '${{ matrix.chain }}_runtime.compact.compressed.wasm'"
            exit 1
          fi

      - name: Setup Zombienet
        working-directory: ${{ env.ZOMBIENET_DIR }}
        run: ./setup.sh

      - name: Run compatibility test
        working-directory: ${{ env.ZOMBIENET_DIR }}
        env:
          CHAIN: ${{ matrix.chain }}-dev
        run: |
          echo "🧪 Testing ${{ matrix.chain }} runtime compatibility with client ${{ matrix.client_version.tag }}"
          echo "Client asset URL: ${{ matrix.client_version.asset_url }}"
          zombienet -p native test smoke_runtime_upgrade.zndsl

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.chain }}-${{ matrix.client_version.tag }}
          path: |
            ${{ env.ZOMBIENET_DIR }}/*.log
            ${{ env.ZOMBIENET_DIR }}/test-*.xml
          retention-days: 7

  test-summary:
    needs: [fetch-client-info, runtime-compatibility-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate test summary
        run: |
          echo "# Runtime Compatibility Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tested Client Versions" >> $GITHUB_STEP_SUMMARY
          echo '${{ needs.fetch-client-info.outputs.client_versions }}' | jq -r '.[] | "- **\(.tag)** - \(.asset_url)"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Chains**: astar, shiden, shibuya" >> $GITHUB_STEP_SUMMARY
          echo "- **Client Versions**: 2 latest versions" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Test Jobs**: 6 (3 chains × 2 client versions)" >> $GITHUB_STEP_SUMMARY
